import {
  Controller,
  Get,
  Post,
  UseGuards,
  Request,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { BillingService } from './billing.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { CompanyFilter } from './common/decorators/company-filter.decorator';
import { UserRole } from '@prisma/client';

@ApiTags('üí∞ Billing - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã')
@ApiBearerAuth()
@Controller('billing')
@UseGuards(JwtAuthGuard, RolesGuard)
export class BillingController {
  constructor(private readonly billingService: BillingService) {}

  @Post('process-daily-rentals')
  @Roles(UserRole.SUPER_ADMIN, UserRole.COMPANY_ADMIN)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è',
    description: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∏—Å–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
  })
  @ApiResponse({
    status: 200,
    description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    schema: {
      example: {
        success: true,
        message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        stats: { total: 15, successful: 12, failed: 3, totalAmount: 1800 },
      },
    },
  })
  async manualProcessDailyRentals() {
    const stats = await this.billingService.manualProcessDailyRentals();
    
    return {
      success: true,
      message: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
      stats,
    };
  }

  @Get('today-stats')
  @Roles(UserRole.SUPER_ADMIN, UserRole.COMPANY_ADMIN, UserRole.COMPANY_MANAGER)
  @ApiOperation({
    summary: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π',
    description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–∏—Å–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
    schema: {
      example: {
        date: '2025-07-12',
        total: 15,
        successful: 12,
        failed: 3,
        totalAmount: 1800,
      },
    },
  })
  async getTodayStats(@CompanyFilter() companyId: string) {
    return await this.billingService.getTodayBillingStats(companyId);
  }

  @Get('drivers-in-debt')
  @Roles(UserRole.SUPER_ADMIN, UserRole.COMPANY_ADMIN, UserRole.COMPANY_MANAGER)
  @ApiOperation({
    summary: 'üí∏ –í–æ–¥–∏—Ç–µ–ª–∏-–¥–æ–ª–∂–Ω–∏–∫–∏',
    description: '–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (–≤ –¥–æ–ª–≥–∞—Ö)',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤',
    schema: {
      example: [
        {
          driverId: 'driver_id',
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          balance: -450,
          debtAmount: 450,
          dailyRate: 150,
          daysInDebt: 3,
          contracts: [
            {
              contractId: 'contract_id',
              vehicle: 'Toyota Camry (01KG123A)',
              dailyRate: 150,
              daysSinceStart: 25,
            },
          ],
        },
      ],
    },
  })
  async getDriversInDebt(@CompanyFilter() companyId: string) {
    return await this.billingService.getDriversInDebt(companyId);
  }
}