import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { PrismaService } from '../prisma/prisma.service';
import { PaymentType, ContractStatus } from '@prisma/client';
import { DailyBillingCompletedEvent, PaymentFailedEvent } from './events/billing.events';

@Injectable()
export class BillingService {
  private readonly logger = new Logger(BillingService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly eventEmitter: EventEmitter2,
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π CRON JOB –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1:00 AM
   */
  @Cron('0 1 * * *', {
    name: 'daily-rental-billing',
    timeZone: 'Asia/Bishkek',
  })
// @Cron('*/30 * * * * *', {  // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
//   name: 'daily-rental-billing',
//   timeZone: 'Asia/Bishkek',
// }) –¢–ï–°–¢–û–í–´–ô –ö–ê–ñ–î–´–ï 30 —Å–µ–∫—É–Ω–¥
  async processDailyRentals() {
    this.logger.log('üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã...');
    
    try {
      const stats = await this.processAllActiveContracts();
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      this.eventEmitter.emit('billing.daily.completed', new DailyBillingCompletedEvent(stats));

      this.logger.log(
        `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${stats.total}, ` +
        `–£—Å–ø–µ—à–Ω–æ: ${stats.successful}, –û—à–∏–±–æ–∫: ${stats.failed}, ` +
        `–°—É–º–º–∞: ${stats.totalAmount.toFixed(2)} —Å–æ–º`
      );

      return stats;
    } catch (error) {
      this.logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async manualProcessDailyRentals() {
    this.logger.log('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è...');
    return await this.processDailyRentals();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
   */
  private async processAllActiveContracts() {
    const stats = { total: 0, successful: 0, failed: 0, totalAmount: 0 };

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const activeContracts = await this.prisma.contract.findMany({
      where: {
        status: ContractStatus.ACTIVE,
        OR: [
          { endDate: null },
          { endDate: { gte: new Date() } },
        ],
      },
      select: {
        id: true,
        dailyRate: true,
        driverId: true,
        companyId: true,
        driver: {
          select: {
            firstName: true,
            lastName: true,
            balance: true,
          },
        },
        vehicle: {
          select: {
            brand: true,
            model: true,
            plateNumber: true,
          },
        },
      },
    });

    this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${activeContracts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    for (const contract of activeContracts) {
      stats.total++;
      
      try {
        const amount = await this.processContractPayment(contract);
        stats.successful++;
        stats.totalAmount += amount;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–≥–æ–≤
        const newBalance = contract.driver.balance.toNumber() - amount;
        const balanceStatus = newBalance < 0 ? `(–î–û–õ–ì: ${Math.abs(newBalance).toFixed(2)})` : `(–±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)})`;
        
        this.logger.debug(
          `‚úÖ ${contract.driver.firstName} ${contract.driver.lastName} - —Å–ø–∏—Å–∞–Ω–æ ${amount} —Å–æ–º ${balanceStatus}`
        );
      } catch (error) {
        stats.failed++;
        
        this.logger.error(
          `‚ùå ${contract.driver.firstName} ${contract.driver.lastName}: ${error.message}`
        );

        // –°–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
        this.eventEmitter.emit('billing.payment.failed', new PaymentFailedEvent(
          contract.id,
          contract.driverId,
          contract.dailyRate.toNumber(),
          error.message,
        ));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ø–ª–∞—Ç–µ–∂–∏
        await this.createFailedPaymentRecord(contract, error.message);
      }
    }

    return stats;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
   * –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç —É—Ö–æ–¥–∏—Ç—å –≤ –º–∏–Ω—É—Å (–¥–æ–ª–≥ –≤–æ–¥–∏—Ç–µ–ª—è)
   */
  private async processContractPayment(contract: any): Promise<number> {
    const dailyRate = contract.dailyRate;

    // –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞)
    await this.prisma.$transaction(async (tx) => {
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–º–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å)
      await tx.driver.update({
        where: { id: contract.driverId },
        data: { balance: { decrement: dailyRate } },
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      await tx.payment.create({
        data: {
          amount: dailyRate,
          type: PaymentType.DAILY_RENT,
          description: `–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ ${contract.vehicle.brand} ${contract.vehicle.model} (${contract.vehicle.plateNumber})`,
          date: new Date(),
          driverId: contract.driverId,
          contractId: contract.id,
          companyId: contract.companyId,
        },
      });
    });

    return dailyRate.toNumber();
  }

  /**
   * –ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  private async createFailedPaymentRecord(contract: any, errorMessage: string) {
    try {
      await this.prisma.payment.create({
        data: {
          amount: contract.dailyRate,
          type: PaymentType.DAILY_RENT,
          description: `–û–®–ò–ë–ö–ê: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ ${contract.vehicle.brand} ${contract.vehicle.model}. ${errorMessage}`,
          date: new Date(),
          driverId: contract.driverId,
          contractId: contract.id,
          companyId: contract.companyId,
        },
      });
    } catch (error) {
      this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contract.id}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
   */
  async getTodayBillingStats(companyId?: string) {
    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));
    const endOfDay = new Date(today.setHours(23, 59, 59, 999));

    const whereClause: any = {
      type: PaymentType.DAILY_RENT,
      date: { gte: startOfDay, lte: endOfDay },
    };

    if (companyId) {
      whereClause.companyId = companyId;
    }

    const [payments, totalAmount] = await Promise.all([
      this.prisma.payment.findMany({
        where: whereClause,
        select: {
          id: true,
          amount: true,
          description: true,
          driver: {
            select: { firstName: true, lastName: true },
          },
        },
      }),
      this.prisma.payment.aggregate({
        where: whereClause,
        _sum: { amount: true },
      }),
    ]);

    const successful = payments.filter(p => !p.description?.includes('–û–®–ò–ë–ö–ê'));
    const failed = payments.filter(p => p.description?.includes('–û–®–ò–ë–ö–ê'));

    return {
      date: startOfDay.toISOString().split('T')[0],
      total: payments.length,
      successful: successful.length,
      failed: failed.length,
      totalAmount: totalAmount._sum.amount?.toNumber() || 0,
      details: {
        successfulPayments: successful,
        failedPayments: failed,
      },
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (–¥–æ–ª–∂–Ω–∏–∫–∏)
   */
  async getDriversInDebt(companyId?: string) {
    const whereClause: any = {
      balance: { lt: 0 }, // –¢–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∏–∫–∏
      contracts: { some: { status: ContractStatus.ACTIVE } },
      isActive: true,
    };

    if (companyId) {
      whereClause.companyId = companyId;
    }

    const drivers = await this.prisma.driver.findMany({
      where: whereClause,
      select: {
        id: true,
        firstName: true,
        lastName: true,
        balance: true,
        contracts: {
          where: { status: ContractStatus.ACTIVE },
          select: {
            id: true,
            dailyRate: true,
            startDate: true,
            vehicle: {
              select: { brand: true, model: true, plateNumber: true },
            },
          },
        },
      },
    });

    return drivers.map(driver => {
      const totalDailyRate = driver.contracts.reduce(
        (sum, contract) => sum + contract.dailyRate.toNumber(),
        0
      );

      const debtAmount = Math.abs(driver.balance.toNumber());
      const daysInDebt = totalDailyRate > 0 ? Math.ceil(debtAmount / totalDailyRate) : 0;

      return {
        driverId: driver.id,
        name: `${driver.firstName} ${driver.lastName}`,
        balance: driver.balance.toNumber(),
        debtAmount,
        dailyRate: totalDailyRate,
        daysInDebt,
        contracts: driver.contracts.map(c => ({
          contractId: c.id,
          vehicle: `${c.vehicle.brand} ${c.vehicle.model} (${c.vehicle.plateNumber})`,
          dailyRate: c.dailyRate.toNumber(),
          daysSinceStart: Math.ceil((new Date().getTime() - c.startDate.getTime()) / (1000 * 60 * 60 * 24)),
        })),
      };
    }).sort((a, b) => a.balance - b.balance); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–æ–ª–≥–∞
  }
}