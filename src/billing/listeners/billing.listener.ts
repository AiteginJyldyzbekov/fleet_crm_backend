import { Injectable, Logger } from '@nestjs/common';
import { OnEvent } from '@nestjs/event-emitter';
import { DailyBillingCompletedEvent, PaymentFailedEvent } from '../events/billing.events';

@Injectable()
export class BillingEventListener {
  private readonly logger = new Logger(BillingEventListener.name);

  @OnEvent('billing.daily.completed')
  handleDailyBillingCompleted(event: DailyBillingCompletedEvent) {
    this.logger.log(
      `üìà –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${event.stats.successful}/${event.stats.total} —É—Å–ø–µ—à–Ω–æ, ` +
      `—Å—É–º–º–∞: ${event.stats.totalAmount.toFixed(2)} —Å–æ–º`
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    // - –û—Ç–ø—Ä–∞–≤–∫—É Slack/Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // - Email –æ—Ç—á–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    // - Webhook –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
  }

  @OnEvent('billing.payment.failed')
  handlePaymentFailed(event: PaymentFailedEvent) {
    this.logger.warn(
      `‚ùå –ù–µ—É–¥–∞—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–Ω—Ç—Ä–∞–∫—Ç ${event.contractId}, ` +
      `–í–æ–¥–∏—Ç–µ–ª—å ${event.driverId}, –ü—Ä–∏—á–∏–Ω–∞: ${event.reason}`
    );

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    // - SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é
    // - Email –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    // - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ CRM
  }
}